{"version":3,"file":"static/js/2103.b2d349f4.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/EmbeddedWallets/EmbeddedWallets.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/blockchain.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/settings.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/constants/settings.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/Auth.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/Storage/LocalStorage.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/IframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/GaslessTransactionMaker.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/Signer.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/EmbeddedWallet.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Paper.ts"],"sourcesContent":["function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-c1e1817a.browser.esm.js';\nimport { UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-1ea97411.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport 'eventemitter3';\n\nconst PaperChainMap = {\n  1: \"Ethereum\",\n  5: \"Goerli\",\n  137: \"Polygon\",\n  250: \"Fantom\",\n  4002: \"FantomTestnet\",\n  80001: \"Mumbai\",\n  43114: \"Avalanche\",\n  10: \"Optimism\",\n  420: \"OptimismGoerli\",\n  56: \"BSC\",\n  97: \"BSCTestnet\",\n  42161: \"ArbitrumOne\",\n  421613: \"ArbitrumGoerli\"\n};\nvar _paper = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _paper, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"options\", void 0);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!_classPrivateFieldGet(this, _paper)) {\n      _classPrivateFieldSet(this, _paper, new Promise(async (resolve, reject) => {\n        try {\n          if (!(this.options.chain.chainId in PaperChainMap)) {\n            throw new Error(\"Unsupported chain id: \" + this.options.chain.chainId);\n          }\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const chainName = PaperChainMap[this.options.chain.chainId];\n          resolve(new PaperEmbeddedWalletSdk({\n            clientId: this.options.clientId,\n            chain: chainName\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      }));\n    }\n    return _classPrivateFieldGet(this, _paper);\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    let user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n          if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          } else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await _classPrivateFieldGet(this, _paper);\n    await paper?.auth.logout();\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      let user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0]\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    // check if chainId is supported or not\n    if (!(chainId in PaperChainMap)) {\n      throw new Error(\"Chain not supported\");\n    }\n    const chainName = PaperChainMap[chainId];\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: chainName\n    });\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0]\n    }));\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  isChainUnsupported(chainId) {\n    return !(chainId in PaperChainMap);\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperChainMap, PaperWalletConnector };\n","import type {\n  Chain,\n  CustomizationOptionsType,\n} from \"@paperxyz/sdk-common-utilities\";\nimport type { EmbeddedWallet } from \"../../lib/EmbeddedWallets/EmbeddedWallet\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\nexport type ClientIdConstructorType = { clientId: string };\nexport type PaperConstructorType = ClientIdConstructorType & {\n  chain: Chain;\n  styles?: CustomizationOptionsType;\n};\nexport type ClientIdWithQuerierType = ClientIdConstructorType & {\n  querier: EmbeddedWalletIframeCommunicator<any>;\n};\nexport type ClientIdWithQuerierAndChainType = ClientIdWithQuerierType & {\n  chain: Chain;\n};\n\n// Auth Types\nexport type AuthDetails = {\n  email?: string;\n  userWalletId: string;\n  recoveryCode?: string;\n};\n\nexport type InitializedUser = {\n  status: UserStatus.LOGGED_IN_WALLET_INITIALIZED;\n  wallet: EmbeddedWallet;\n  walletAddress: string;\n  authDetails: AuthDetails;\n};\n\n// Embedded Wallet Types\nexport enum UserStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\nexport enum UserWalletStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\",\n  LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\n\nexport type WalletAddressObjectType = {\n  walletAddress: string;\n};\n\nexport type SetUpWalletRpcReturnType = WalletAddressObjectType & {\n  deviceShareStored: string;\n  isIframeStorageEnabled: boolean;\n};\n\nexport type SendEmailOtpReturnType = {\n  isNewUser: boolean;\n  isNewDevice: boolean;\n};\nexport type LogoutReturnType = { success: boolean };\nexport type GetAuthDetailsReturnType = { authDetails?: AuthDetails };\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\nexport type GetUserWalletStatusRpcReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"wallet\" | \"status\">;\n    };\n\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\nexport type GetUserWalletStatusFnReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"status\">;\n    };\n\n// This is returned from the getUser method in PaperEmbeddedWalletSdk\nexport type GetUser =\n  | {\n      status: UserStatus.LOGGED_OUT;\n    }\n  | InitializedUser;\n","export const ChainToPublicRpc: Record<Chain, string> = {\n  Ethereum: \"https://rpc.ankr.com/eth\",\n  Goerli: \"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n  Mumbai: \"https://rpc-mumbai.maticvigil.com\",\n  Polygon: \"https://rpc-mainnet.maticvigil.com\",\n  Avalanche: \"https://api.avax.network/ext/bc/C/rpc\",\n  Optimism: \"https://optimism.rpc.thirdweb.com\",\n  OptimismGoerli: \"https://optimism-goerli.rpc.thirdweb.com\",\n  BSC: \"https://binance.rpc.thirdweb.com\",\n  BSCTestnet: \"https://binance-testnet.rpc.thirdweb.com\",\n  ArbitrumOne: \"https://arbitrum.rpc.thirdweb.com\",\n  ArbitrumGoerli: \"https://arbitrum-goerli.rpc.thirdweb.com\",\n  Fantom: \"https://fantom.rpc.thirdweb.com\",\n  FantomTestnet: \"https://fantom-testnet.rpc.thirdweb.com\",\n};\n\n// General Embedded wallet types\nexport type Chain =\n  | \"Polygon\"\n  | \"Mumbai\"\n  | \"Goerli\"\n  | \"Ethereum\"\n  | \"Avalanche\"\n  | \"Optimism\"\n  | \"OptimismGoerli\"\n  | \"BSC\"\n  | \"BSCTestnet\"\n  | \"ArbitrumOne\"\n  | \"ArbitrumGoerli\"\n  | \"Fantom\"\n  | \"FantomTestnet\";\n\nexport type SupportedChainName = Chain | \"Rinkeby\" | \"Solana\" | \"SolanaDevnet\";\n","const isDev = (): boolean => {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.localStorage.getItem(\"IS_PAPER_DEV\") === \"true\"\n  );\n};\n\nconst isOldPaperDomain = (): boolean =>\n  typeof window !== \"undefined\" && window.location.origin.includes(\"paper.xyz\");\n\nexport const getPaperOriginUrl = (): string => {\n  if (isDev())\n    return (\n      window.localStorage.getItem(\"PAPER_DEV_URL\") ?? \"http://localhost:3000\"\n    );\n\n  if (isOldPaperDomain()) return window.location.origin;\n\n  return \"https://withpaper.com\";\n};\n","export const EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\n\nexport const WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `paperEwsWalletUserId-${clientId}`;\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\nexport const AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME = (\n  clientId: string,\n  userId: string,\n) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId: string) =>\n  `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n","import type {\n  AuthDetails,\n  InitializedUser,\n  SetUpWalletRpcReturnType,\n} from \"./EmbeddedWallets/EmbeddedWallets\";\n\nexport enum AuthProvider {\n  PAPER_EMAIL_OTP = \"PaperEmailOTP\",\n  GOOGLE = \"Google\",\n  TWITTER = \"Twitter\",\n  AUTH0 = \"Auth0\",\n  CUSTOM_JWT = \"CustomJWT\",\n}\n\nexport type GetSocialLoginClientIdReturnType = {\n  clientId: string;\n};\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\nexport type StoredTokenType = {\n  jwtToken: string;\n  authProvider: AuthProvider;\n  authDetails: AuthDetails;\n  developerClientId: string;\n};\n\nexport type AuthStoredTokenWithCookieReturnType = {\n  storedToken: StoredTokenType & {\n    cookieString: string;\n    shouldStoreCookieString: boolean;\n    isNewUser: boolean;\n  };\n};\nexport type AuthAndWalletRpcReturnType = AuthStoredTokenWithCookieReturnType & {\n  walletDetails: SetUpWalletRpcReturnType;\n};\n\nexport type AuthLoginReturnType = { user: InitializedUser };\n","import {\n  AUTH_TOKEN_LOCAL_STORAGE_NAME,\n  DEVICE_SHARE_LOCAL_STORAGE_NAME,\n  WALLET_USER_ID_LOCAL_STORAGE_NAME,\n} from \"../../constants/settings\";\n\nconst data = new Map<string, string>();\n\nexport class LocalStorage {\n  protected isSupported: boolean;\n  protected clientId: string;\n  constructor({ clientId }: { clientId: string }) {\n    this.isSupported = typeof window !== \"undefined\" && !!window.localStorage;\n    this.clientId = clientId;\n  }\n\n  protected async getItem(key: string): Promise<string | null> {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n\n  protected async removeItem(key: string): Promise<boolean> {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n\n  async saveAuthCookie(cookie: string): Promise<void> {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie(): Promise<string | null> {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie(): Promise<boolean> {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n\n  async saveDeviceShare(share: string, userId: string): Promise<void> {\n    await this.saveWalletUserId(userId);\n    await this.setItem(\n      DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      share,\n    );\n  }\n  async getDeviceShare(): Promise<string | null> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return null;\n  }\n  async removeDeviceShare(): Promise<boolean> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return false;\n  }\n\n  async getWalletUserId(): Promise<string | null> {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId: string): Promise<void> {\n    await this.setItem(\n      WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId),\n      userId,\n    );\n  }\n  async removeWalletUserId(): Promise<boolean> {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n","import type { MessageType, StyleObject } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\n\ntype IFrameCommunicatorProps = {\n  link: string;\n  iframeId: string;\n  container?: HTMLElement;\n  iframeStyles?: StyleObject;\n  onIframeInitialize?: () => void;\n};\n\nfunction sleep(seconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  colorScheme: \"light\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\",\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map<string, boolean>();\n\nexport class IframeCommunicator<T extends { [key: string]: any }> {\n  private iframe: HTMLIFrameElement;\n  private POLLING_INTERVAL_SECONDS = 1.4;\n  private POST_LOAD_BUFFER_SECONDS = 1;\n\n  constructor({\n    link,\n    iframeId,\n    container = document.body,\n    iframeStyles,\n    onIframeInitialize,\n  }: IFrameCommunicatorProps) {\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId) as HTMLIFrameElement | null;\n    const hrefLink = new URL(link);\n    const sdkVersion = process.env.SDK_VERSION;\n    if (!sdkVersion) {\n      throw new Error(\"Missing SDK_VERSION env var\");\n    }\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src != hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles,\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      iframe.onload = this.onIframeLoadHandler(\n        iframe,\n        this.POST_LOAD_BUFFER_SECONDS,\n        onIframeInitialize,\n      );\n    }\n    this.iframe = iframe;\n  }\n\n  protected async onIframeLoadedInitVariables(): Promise<Record<string, any>> {\n    return {};\n  }\n\n  onIframeLoadHandler(\n    iframe: HTMLIFrameElement,\n    prePostMessageSleepInSeconds: number,\n    onIframeInitialize?: () => void,\n  ) {\n    return async () => {\n      const promise = new Promise<boolean>(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = (event: MessageEvent<MessageType<void>>) => {\n          const { data } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(new Error(data.error));\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        // iFrame takes a bit of time after loading to be ready for message receiving\n        // This is hacky\n        await sleep(prePostMessageSleepInSeconds);\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n          // ? We initialise the iframe with a bunch\n          // of useful information so that we don't have to pass it\n          // through in each of the future call. This would be where we do it.\n          {\n            eventType: INIT_IFRAME_EVENT,\n            data: await this.onIframeLoadedInitVariables(),\n          },\n          `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n          [channel.port2],\n        );\n      });\n      await promise;\n    };\n  }\n\n  async call<ReturnData>({\n    procedureName,\n    params,\n    showIframe = false,\n    injectRecoveryCode = { isInjectRecoveryCode: false },\n  }: {\n    procedureName: keyof T;\n    params: T[keyof T];\n    showIframe?: boolean;\n    injectRecoveryCode?: {\n      getRecoveryCode?: (userWalletId: string) => Promise<string | undefined>;\n      isInjectRecoveryCode: boolean;\n    };\n  }) {\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise<ReturnData>((res, rej) => {\n      if (injectRecoveryCode.isInjectRecoveryCode) {\n        const injectRecoveryCodeListener = async (\n          e: MessageEvent<{ type: string; userWalletId: string }>,\n        ) => {\n          if (\n            e.origin !== getPaperOriginUrl() ||\n            e.data.type !== \"paper_getRecoveryCode\" ||\n            typeof e.data.userWalletId !== \"string\"\n          ) {\n            return;\n          }\n          const recoveryCode = await injectRecoveryCode.getRecoveryCode?.(\n            e.data.userWalletId,\n          );\n          this.iframe.contentWindow?.postMessage(\n            { type: \"paper_getRecoveryCode_response\", recoveryCode },\n            getPaperOriginUrl(),\n          );\n          window.removeEventListener(\"message\", injectRecoveryCodeListener);\n        };\n        window.addEventListener(\"message\", injectRecoveryCodeListener);\n      }\n\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async (\n        event: MessageEvent<MessageType<ReturnData>>,\n      ) => {\n        const { data } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(new Error(data.error));\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage(\n        { eventType: procedureName, data: params },\n        `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n        [channel.port2],\n      );\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n","import type { CustomizationOptionsType } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\nimport { LocalStorage } from \"../Storage/LocalStorage\";\nimport { IframeCommunicator } from \"./IframeCommunicator\";\n\nexport class EmbeddedWalletIframeCommunicator<\n  T extends { [key: string]: any },\n> extends IframeCommunicator<T> {\n  clientId: string;\n  constructor({\n    clientId,\n    customizationOptions,\n  }: {\n    clientId: string;\n    customizationOptions?: CustomizationOptionsType;\n  }) {\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions,\n      }).href,\n      container: document.body,\n    });\n    this.clientId = clientId;\n  }\n\n  override async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId,\n    });\n\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId,\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nexport function createEmbeddedWalletIframeLink({\n  clientId,\n  path,\n  queryParams,\n}: {\n  clientId: string;\n  path: string;\n  queryParams?: { [key: string]: string | number };\n}) {\n  const embeddedWalletUrl = new URL(path, getPaperOriginUrl());\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(\n        queryKey,\n        queryParams[queryKey]?.toString() || \"\",\n      );\n    }\n  }\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  return embeddedWalletUrl;\n}\nexport const EMBEDDED_WALLET_IFRAME_ID = \"paper-embedded-wallet-iframe\";\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthProvider,\n} from \"../interfaces/Auth\";\nimport type {\n  ClientIdWithQuerierType,\n  LogoutReturnType,\n  SendEmailOtpReturnType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { LocalStorage } from \"../utils/Storage/LocalStorage\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type AuthQuerierTypes = {\n  loginWithJwtAuthCallback: {\n    token: string;\n    authProvider: AuthProvider;\n    recoveryCode?: string;\n  };\n  loginWithPaperModal: void | { email: string; recoveryCode?: string };\n  logout: void;\n  sendPaperEmailLoginOtp: { email: string };\n  verifyPaperEmailLoginOtp: {\n    email: string;\n    otp: string;\n    recoveryCode?: string;\n  };\n};\n\nexport class Auth {\n  protected clientId: string;\n  protected AuthQuerier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n  protected localStorage: LocalStorage;\n  protected onAuthSuccess: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link PaperEmbeddedWalletSdk.auth} instead.\n   *\n   * Authentication settings can be managed via the [authentication settings dashboard](https://withpaper.com/dashboard/auth-settings)\n   * @param {string} params.clientId the clientId associated with the various authentication settings\n   */\n  constructor({\n    clientId,\n    querier,\n    onAuthSuccess,\n  }: ClientIdWithQuerierType & {\n    onAuthSuccess: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n  }) {\n    this.clientId = clientId;\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({ clientId });\n    this.onAuthSuccess = onAuthSuccess;\n  }\n\n  private async preLogin() {\n    await this.logout();\n  }\n\n  private async postLogin({\n    storedToken,\n    walletDetails,\n  }: AuthAndWalletRpcReturnType): Promise<AuthLoginReturnType> {\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails,\n    });\n    return initializedUser;\n  }\n\n  /**\n   * @description\n   * Used to log the user in with an oauth login flow\n   *\n   * Note that you have to either enable \"Auth0\" or \"Custom JSON Web Token\" in the [auth setting dashboard](https://withpaper.com/dashboard/auth-settings) in order to use this\n   * @param {string} jwtParams.token The associate token from the oauth callback\n   * @param {AuthProvider} jwtParams.provider The Auth provider that is being used\n   * @param {string} jwtParams.recoveryCode This has to be passed in if the user is not logging in for the first time in order for us to decrypt and recover the users wallet\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async loginWithJwtAuth({\n    token,\n    authProvider,\n    recoveryCode,\n  }: AuthQuerierTypes[\"loginWithJwtAuthCallback\"]): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithJwtAuthCallback\",\n      params: {\n        token,\n        authProvider,\n        recoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await Paper.auth.loginWithPaperModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   *\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperModal(args?: {\n    getRecoveryCode: (userWalletId: string) => Promise<string | undefined>;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: undefined,\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n        getRecoveryCode: args?.getRecoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet using email OTP\n   *\n   * @example\n   *  // Basic Flow\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   *\n   * @example\n   *  // If you want users to never be prompted for a recovery code.\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    const email = \"you@example.com\";\n   *\n   *    // getRecoveryCodeForUser is a function to get a recovery code based on an email\n   *    // you write the function below\n   *    const recoveryCode: string | undefined = await getRecoveryCodeForUser(email);\n   *\n   *    // prompts user to enter the code they received\n   *    // Because you pass in a recovery code wherever possible, for existing users on a new device, they would not be prompted to enter the recovery code flow\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email, recoveryCode });\n   *    // user is now logged in\n   *    if (user.authDetails.recoveryCode) {\n   *      // user has a recovery code that you can store to pass in to the function above\n   *      // you write the function below\n   *      await storeRecoveryCodeForUser(email, user.authDetails.recoveryCode);\n   *    }\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperEmailOtp({\n    email,\n    recoveryCode,\n  }: {\n    email: string;\n    recoveryCode?: string;\n  }): Promise<AuthLoginReturnType> {\n    await this.preLogin();\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: { email, recoveryCode },\n      showIframe: true,\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * A headless way to send the users at {email} an OTP code.\n   * You need to then call {@link Auth.verifyPaperEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    const { isNewUser } = await Paper.auth.sendPaperEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await Paper.auth.verifyPaperEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\", recoveryCode: \"Required if user is an existing user. i.e. !isNewUser\"});\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{ success: boolean, isNewUser: boolean }} Success: indicating if the email was successfully sent (Note the email could still end up in the user's spam folder). IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendPaperEmailLoginOtp({\n    email,\n  }: AuthQuerierTypes[\"sendPaperEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    await this.preLogin();\n    const { isNewUser, isNewDevice } =\n      await this.AuthQuerier.call<SendEmailOtpReturnType>({\n        procedureName: \"sendPaperEmailLoginOtp\",\n        params: { email },\n      });\n    return { isNewUser, isNewDevice };\n  }\n\n  /**\n   *  @description\n   * Used to verify the otp that the user receives from  Paper\n   *\n   * See {@link Auth.sendPaperEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithPaperEmailOtp` with `verifyPaperEmailLoginOtp`\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @param {string} props.otp The code that the user received in their email\n   * @param {string} props.recoveryCode The code that is first sent to the user when they sign up. Required if user is an existing user. i.e. !isNewUser from return params of {@link Auth.sendPaperEmailLoginOtp}\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyPaperEmailLoginOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: AuthQuerierTypes[\"verifyPaperEmailLoginOtp\"]) {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyPaperEmailLoginOtp\",\n      params: { email, otp, recoveryCode },\n      injectRecoveryCode: {\n        isInjectRecoveryCode: true,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Logs any existing user out of their wallet.\n   * @returns {{success: boolean}} true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout(): Promise<LogoutReturnType> {\n    const { success } = await this.AuthQuerier.call<LogoutReturnType>({\n      procedureName: \"logout\",\n      params: undefined,\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId,\n    };\n  }\n}\n","import type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport type { ClientIdWithQuerierAndChainType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  CallContractReturnType,\n  ContractCallInputType,\n} from \"../../interfaces/EmbeddedWallets/GaslessTransactionMaker\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type GaslessTransactionQuerierTypes = {\n  callContract: {\n    contractAddress: string;\n    method: {\n      stub: string;\n      args: Array<unknown>;\n    };\n    chain: Chain;\n  };\n};\n\n/**\n * @description GaslessTransactionMaker is used to execute gasless transactions from the embedded wallets\n */\nexport class GaslessTransactionMaker {\n  protected chain: Chain;\n  protected clientId: string;\n  protected gaslessTransactionQuerier: EmbeddedWalletIframeCommunicator<GaslessTransactionQuerierTypes>;\n  constructor({ chain, clientId, querier }: ClientIdWithQuerierAndChainType) {\n    this.chain = chain;\n    this.clientId = clientId;\n    this.gaslessTransactionQuerier = querier;\n  }\n  /**\n   * @description\n   * Use to call arbitrary contracts on the blockchain. Note that you have to enable {@link https://withpaper.com/dashboard/developers Sponsored Fees} in order for this to work.\n   *\n   * @param {string} params.contractAddress The address for which the contract call is directed too.\n   * @param {string} params.methodInterface the function stub on the contract. This looks something like `function myFunctionName(address user, uint256 tokenId) external payable`. Refer to this {@link https://blog.ricmoo.com/human-readable-contract-abis-in-ethers-js-141902f4d917 ethers.js article} for more.\n   * @param {Array} params.methodArgs The arguments that is to be passed to the contract in order that they are to be passed to the contract.\n   * @throws if there is an error calling the contract for whatever reason.\n   * @returns {{ transactionHash: string }} The transaction hash associated with the successful contract call.\n   */\n  async callContract({\n    contractAddress,\n    methodArgs,\n    methodInterface,\n  }: ContractCallInputType): Promise<CallContractReturnType> {\n    return await this.gaslessTransactionQuerier.call<CallContractReturnType>({\n      procedureName: \"callContract\",\n      params: {\n        chain: this.chain,\n        contractAddress,\n        method: {\n          args: methodArgs,\n          stub: methodInterface,\n        },\n      },\n    });\n  }\n}\n","import type {\n  Provider,\n  TransactionRequest,\n} from \"@ethersproject/abstract-provider\";\nimport type {\n  TypedDataDomain,\n  TypedDataField,\n} from \"@ethersproject/abstract-signer\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport type { Bytes } from \"@ethersproject/bytes\";\nimport type { Deferrable } from \"@ethersproject/properties\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport type { ClientIdWithQuerierType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  GetAddressReturnType,\n  SignMessageReturnType,\n  SignTransactionReturnType,\n  SignedTypedDataReturnType,\n} from \"../../interfaces/EmbeddedWallets/Signer\";\n\nimport type { JsonRpcProvider } from \"@ethersproject/providers\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type SignerProcedureTypes = {\n  getAddress: void;\n  signMessage: {\n    message: string | Bytes;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  signTransaction: {\n    transaction: Deferrable<TransactionRequest>;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  signTypedDataV4: {\n    domain: TypedDataDomain;\n    types: Record<string, Array<TypedDataField>>;\n    message: Record<string, unknown>;\n    chainId: number;\n    rpcEndpoint: string;\n  };\n  connect: { provider: Provider };\n};\n\nexport class EthersSigner extends Signer {\n  protected querier: EmbeddedWalletIframeCommunicator<SignerProcedureTypes>;\n  protected clientId: string;\n  protected endpoint: string;\n  private DEFAULT_ETHEREUM_CHAIN_ID = 5;\n  constructor({\n    provider,\n    clientId,\n    querier,\n  }: ClientIdWithQuerierType & {\n    provider: Provider;\n  }) {\n    super();\n    this.clientId = clientId;\n    this.querier = querier;\n    // we try to extract a url if possible\n    this.endpoint = (provider as JsonRpcProvider).connection?.url;\n    defineReadOnly(this, \"provider\", provider);\n  }\n\n  override async getAddress(): Promise<string> {\n    const { address } = await this.querier.call<GetAddressReturnType>({\n      procedureName: \"getAddress\",\n      params: undefined,\n    });\n    return address;\n  }\n\n  override async signMessage(message: string | Bytes): Promise<string> {\n    const network = await this.provider?.getNetwork();\n    if (network) {\n      network._defaultProvider;\n    }\n\n    const { signedMessage } = await this.querier.call<SignMessageReturnType>({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId:\n          (await this.provider?.getNetwork())?.chainId ??\n          this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint,\n      },\n    });\n    return signedMessage;\n  }\n\n  override async signTransaction(\n    transaction: TransactionRequest,\n  ): Promise<string> {\n    const { signedTransaction } =\n      await this.querier.call<SignTransactionReturnType>({\n        procedureName: \"signTransaction\",\n        params: {\n          transaction,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n          rpcEndpoint: this.endpoint,\n        },\n      });\n    return signedTransaction;\n  }\n\n  async _signTypedData(\n    domain: SignerProcedureTypes[\"signTypedDataV4\"][\"domain\"],\n    types: SignerProcedureTypes[\"signTypedDataV4\"][\"types\"],\n    message: SignerProcedureTypes[\"signTypedDataV4\"][\"message\"],\n  ): Promise<string> {\n    const { signedTypedData } =\n      await this.querier.call<SignedTypedDataReturnType>({\n        procedureName: \"signTypedDataV4\",\n        params: {\n          domain,\n          types,\n          message,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n          rpcEndpoint: this.endpoint,\n        },\n      });\n    return signedTypedData;\n  }\n\n  override connect(provider: Provider): EthersSigner {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier,\n    });\n  }\n}\n","import type { Networkish } from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport { ChainToPublicRpc } from \"@paperxyz/sdk-common-utilities\";\nimport type {\n  ClientIdWithQuerierAndChainType,\n  GetUserWalletStatusFnReturnType,\n  GetUserWalletStatusRpcReturnType,\n  SetUpWalletRpcReturnType,\n  WalletAddressObjectType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { UserWalletStatus } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage\";\nimport { GaslessTransactionMaker } from \"./GaslessTransactionMaker\";\nimport { EthersSigner } from \"./Signer\";\n\nexport type WalletManagementTypes = {\n  createWallet: void;\n  setUpNewDevice: void;\n  getUserStatus: void;\n};\nexport type WalletManagementUiTypes = {\n  createWalletUi: void;\n  setUpNewDeviceUi: void;\n};\n\nexport type EmbeddedWalletInternalHelperType = { showUi: boolean };\n\nexport class EmbeddedWallet {\n  protected clientId: string;\n  protected chain: Chain;\n  protected walletManagerQuerier: EmbeddedWalletIframeCommunicator<\n    WalletManagementTypes & WalletManagementUiTypes\n  >;\n  protected localStorage: LocalStorage;\n\n  public gasless: GaslessTransactionMaker;\n\n  /**\n   * Not meant to be initialized directly. Call {@link .initializeUser} to get an instance\n   * @param param0\n   */\n  constructor({ clientId, chain, querier }: ClientIdWithQuerierAndChainType) {\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId,\n      querier,\n    });\n\n    this.localStorage = new LocalStorage({ clientId });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @param {string} param.deviceShareStored the value that is saved for the user's device share.\n   * We save this into the localStorage on the site itself if we could not save it within the iframe's localStorage.\n   * This happens in incognito mostly\n   * @param {string} param.walletAddress User's wallet address\n   * @param {boolean} param.isIframeStorageEnabled Tells us if we were able to store values in the localStorage in our iframe.\n   * We need to store it under the dev's domain localStorage if we weren't able to store things in the iframe\n   * @returns {{ walletAddress : string }} The user's wallet details\n   */\n  async postWalletSetUp({\n    deviceShareStored,\n    walletAddress,\n    isIframeStorageEnabled,\n    walletUserId,\n  }: SetUpWalletRpcReturnType & {\n    walletUserId: string;\n  }): Promise<WalletAddressObjectType> {\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return { walletAddress };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   * @returns {GetUserWalletStatusFnReturnType} an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus(): Promise<GetUserWalletStatusFnReturnType> {\n    const userStatus =\n      await this.walletManagerQuerier.call<GetUserWalletStatusRpcReturnType>({\n        procedureName: \"getUserStatus\",\n        params: undefined,\n      });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        user: { ...userStatus.user, wallet: this },\n      };\n    }\n    return userStatus;\n  }\n\n  /**\n   * @description\n   * Switches the chain that the user wallet is currently on.\n   * @example\n   * // user wallet will be set to Polygon\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * @param {Chain} params.chain The chain that we are changing the user wallet too\n   */\n  async setChain({ chain }: { chain: Chain }): Promise<void> {\n    this.chain = chain;\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId: this.clientId,\n      querier: this.walletManagerQuerier,\n    });\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * @param {Networkish} network.rpcEndpoint the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link PaperEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link PaperEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network?: {\n    rpcEndpoint: Networkish;\n  }): Promise<EthersSigner> {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: getDefaultProvider(\n        network?.rpcEndpoint ?? ChainToPublicRpc[this.chain],\n      ),\n      querier: this.walletManagerQuerier,\n    });\n    return signer;\n  }\n}\n","import type {\n  GetUser,\n  PaperConstructorType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport {\n  UserStatus,\n  UserWalletStatus,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport type { AuthQuerierTypes } from \"./Auth\";\nimport { Auth } from \"./Auth\";\nimport { EmbeddedWallet } from \"./EmbeddedWallets/EmbeddedWallet\";\n\nexport class PaperEmbeddedWalletSdk {\n  protected clientId: string;\n  protected querier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n\n  private wallet: EmbeddedWallet;\n  /**\n   * Used to manage the Auth state of the user.\n   */\n  auth: Auth;\n\n  /**\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });\n   * @param {string} initParams.clientId the clientId found on the {@link https://withpaper.com/dashboard/developers developer's dashboard}\n   * @param {Chain} initParams.chain sets the default chain that the EmbeddedWallet will live on.\n   * @param {CustomizationOptionsType} initParams.styles sets the default style override for any modal that pops up asking for user's details when creating wallet or logging in.\n   */\n  constructor({ clientId, chain, styles }: PaperConstructorType) {\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles,\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier,\n    });\n\n    this.auth = new Auth({\n      clientId,\n      querier: this.querier,\n      onAuthSuccess: async (authResult) => {\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId,\n        });\n        return {\n          user: {\n            status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress,\n          },\n        };\n      },\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   *  const user = await Paper.getUser();\n   *  switch (user.status) {\n   *     case UserStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   *}\n   * @returns {GetUser} an object to containing various information on the user statuses\n   */\n  async getUser(): Promise<GetUser> {\n    const userStatus = await this.wallet.getUserWalletStatus();\n    switch (userStatus.status) {\n      // user gets {UserWalletStatus.LOGGED_IN_NEW_DEVICE} when they log in but never complete the recovery flow and exits (close modal, refresh etc)\n      case UserWalletStatus.LOGGED_IN_NEW_DEVICE:\n      // User gets {UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED} when they log in but manage to exit the client in the small window between auth completion and sending them their wallet recovery details\n      case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED:\n        // in both case, we simply log them out to reset their state\n        await this.auth.logout();\n        return this.getUser();\n      case UserWalletStatus.LOGGED_OUT:\n        return {\n          status: UserStatus.LOGGED_OUT,\n        };\n      case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED:\n        return {\n          status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n          ...userStatus.user,\n        };\n    }\n  }\n}\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","PaperChainMap","_paper","WeakMap","_signer","PaperWalletConnector","_Connector","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","walletIds","_classPrivateFieldInitSpec","writable","value","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","length","onDisconnect","emit","account","utils","stop","_x","apply","arguments","id","unsupported","isChainUnsupported","chain","_callee2","_context2","_createClass","key","_this2","_classPrivateFieldGet","this","_classPrivateFieldSet","Promise","_ref3","_callee3","resolve","reject","_yield$import","PaperEmbeddedWalletSdk","chainName","_context3","Error","sent","clientId","t0","_x2","_x3","_connect","_callee4","paperSDK","user","authResult","_context4","getPaperSDK","getUser","status","UserStatus","email","auth","loginWithPaperEmailOtp","loginWithPaperModal","abrupt","setupListeners","getAddress","_x4","_disconnect","_callee5","paper","_context5","logout","_getAddress","_callee6","signer","_context6","getSigner","_isConnected","_callee7","addr","_context7","_getProvider","_callee8","_context8","provider","_getSigner","_callee9","_this$user","_context9","wallet","getEthersJsSigner","rpcEndpoint","rpc","_isAuthorized","_callee10","_context10","_switchChain","_callee11","_this$user2","_this$user3","_context11","chains","find","c","setChain","t1","t2","t3","_x5","_setupListeners","_callee12","_context12","getProvider","on","onAccountsChanged","onChainChanged","_getEmail","_callee13","_context13","authDetails","Connector","s","t","o","Ethereum","Goerli","Mumbai","Polygon","Avalanche","Optimism","OptimismGoerli","BSC","BSCTestnet","ArbitrumOne","ArbitrumGoerli","Fantom","FantomTestnet","i","window","localStorage","getItem","location","origin","includes","y","A","a","concat","L","f","e","re","q","n","PAPER_EMAIL_OTP","GOOGLE","TWITTER","AUTH0","CUSTOM_JWT","G","LOGGED_OUT","LOGGED_IN_WALLET_INITIALIZED","R","LOGGED_IN_WALLET_UNINITIALIZED","LOGGED_IN_NEW_DEVICE","x","Map","m","isSupported","get","setItem","set","removeItem","saveWalletUserId","getWalletUserId","C","setTimeout","Z","height","width","border","backgroundColor","colorScheme","position","top","right","zIndex","display","v","_","_ref2","link","iframeId","_ref2$container","container","r","document","body","iframeStyles","onIframeInitialize","POLLING_INTERVAL_SECONDS","POST_LOAD_BUFFER_SECONDS","getElementById","d","URL","l","searchParams","src","href","createElement","p","u","Object","assign","style","setAttribute","appendChild","onload","onIframeLoadHandler","iframe","_callee15","_context15","_callee14","_context14","MessageChannel","port1","onmessage","T","h","data","close","success","error","contentWindow","onIframeLoadedInitVariables","t4","eventType","t5","W","t6","port2","postMessage","_this3","procedureName","params","_ref3$showIframe","showIframe","_ref3$injectRecoveryC","injectRecoveryCode","isInjectRecoveryCode","_callee18","_context18","addEventListener","_callee16","O","U","k","_context16","type","userWalletId","getRecoveryCode","recoveryCode","removeEventListener","_callee17","_context17","delete","w","_ref4","_ref5","_this4","customizationOptions","J","B","path","queryParams","_callee19","_context19","getAuthCookie","getDeviceShare","authCookie","deviceShareStored","walletUserId","_ref6","$","_i","_Object$keys","keys","toString","D","_ref7","querier","onAuthSuccess","AuthQuerier","_callee20","_context20","_ref8","_this5","storedToken","walletDetails","_callee21","_context21","shouldStoreCookieString","saveAuthCookie","cookieString","_ref9","_this6","token","authProvider","_callee22","_context22","preLogin","postLogin","_callee23","_context23","_ref10","_this7","_callee24","_context24","_ref11","_this8","_callee25","_yield$_this8$AuthQue","_context25","isNewUser","isNewDevice","_ref12","_this9","otp","_callee26","_context26","_callee27","_yield$this$AuthQueri","_context27","removeAuthCookie","removeWalletUserId","I","_ref13","gaslessTransactionQuerier","_ref14","_this10","contractAddress","methodArgs","methodInterface","_callee28","_context28","method","args","stub","g","_K","_super2","_ref15","_this11","DEFAULT_ETHEREUM_CHAIN_ID","endpoint","connection","url","X","_callee29","_yield$this$querier$c","_context29","address","_callee30","_yield$this$querier$c2","_context30","getNetwork","_defaultProvider","t7","t8","message","t9","signedMessage","_callee31","_yield$this$querier$c3","_context31","transaction","signedTransaction","_callee32","_yield$this$querier$c4","_context32","t10","domain","types","t11","signedTypedData","K","S","_ref16","walletManagerQuerier","gasless","_ref17","_this12","walletAddress","isIframeStorageEnabled","_callee33","_context33","saveDeviceShare","_callee34","_context34","E","_ref18","_this13","_callee35","_context35","_callee36","_context36","Y","ee","M","_ref19","_this14","styles","_callee37","_context37","postWalletSetUp","_callee38","_context38","getUserWalletStatus"],"sourceRoot":""}